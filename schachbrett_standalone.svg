<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN" 
"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">
<svg id="root"  onload="init(evt)" width="640px" height="640px" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" version="1.1">
  <desc>Schachbrett</desc>
<script type="text/ecmascript">
<![CDATA[

 var svgNS;
 var xlinkNS;

 var SVGDocument;
 var mode = new Array();
 var VirtualMatrix = new Array();
 
function init (evt) {
     svgNS = "http://www.w3.org/2000/svg";
     xlinkNS = "http://www.w3.org/1999/xlink";
     
     O=evt.target;
	 SVGDocument = O.ownerDocument; 
     // SVGDocument = evt.getTarget().getOwnerDocument();
     
     // var mouseX = evt.ClientX; 
     //        var mouseY = evt.ClientY;
     
     mode[0] = 0; mode[1] = 0; 

     Matrix('grid1','feld');   
     // Matrix('grid2','feld');   
         
     // VirtualMatrix[0] = {x:0,y:0,status:0}; 
     // VirtualMatrix[0] = {id:f0,x:0,y:0,status:0}; 
}

            

function transF (f) {  

     var OuterArray = new Array(); 
     
     var A = {x:0,y:f};
     var B = {x:f,y:0};
     var C = {x:0,y:-f};
     var D = {x:-f,y:0};
                                
     OuterArray[0] = new Array(A,B,C,D);
     OuterArray[1] = new Array(B,C,D,A); 
     OuterArray[2] = new Array(C,D,A,B);      
     OuterArray[3] = new Array(D,A,B,C); 
     return OuterArray;
             
}

function ShowMatrix ()
{

 // defined in VirtualMatrix
 // VirtualMatrix[0] = {id:f0,x:0,y:0,status:0}; 
 var str = "Matrix:\n";
      
     for (i=0;i<VirtualMatrix.length;i++) {
         str += VirtualMatrix[i].id+"-"+VirtualMatrix[i].status+"\n"; 
     }
     alert (str);

}

function LogField (evt,w,h) {

     var posX = evt.ClientX; 
     var posY = evt.ClientY;
 
     var Xmin, Ymin;      
     var Xmax, Ymax; 
     var st = "void";
    
     for (i=0;i<VirtualMatrix.length;i++) {
          
          Xmin = VirtualMatrix[i].x;
          Ymin = VirtualMatrix[i].y;
          Xmax = Xmin+w; 
          Ymax = Ymin+h;

          if ((posX > Xmin) & (posY > Ymin)) 
          {
            if ((posX < Xmax) & (posY > Ymin)) 
            {
              if ((posX < Xmax) & (posY < Ymax)) 
              {
                if ((posX > Xmin) & (posY < Ymax))
                {
                  // st = "posX:"+posX+" , posY:"+posY+" - Xmin:"+Xmin+" , Ymin:"+Ymin; 
                  st = VirtualMatrix[i].id;  VirtualMatrix[i].status = 1;    
                }  
              }          
            } 
          } 
          
       
      }

     alert (st);

}




function Position (el,evt) {
     var svgdoc=evt.target.ownerDocument;
     var obj =  svgdoc.getElementById(el);    
     var list =  obj.getFirstChild();
    
     var px = evt.ClientX; 
     var py = evt.ClientY;

     
     var d = 7;
     var border = 4;
     // var px = circle.item[2].getAttribute("cx");
     // var py = circle.item[2].getAttribute("cy");

     // var trace=obj.getBBox();     
     // var x = trace.x; var y = trace.y; var w = (trace.width -(d+border)); var h = (trace.height -(d+border));
     // alert("x:"+x+",y:"+y+",width:"+w+",height:"+h);
     // alert(x_mouse);
     // alert("x:"+px+",y:"+py);
     // alert(list.length);
     // alert(list.item(0).getNodeName());
     // alert(list.getNodeName());
     alert("x:"+px+",y:"+py);
}


function Snap (evt,el,d,which) {
     
             
             var mouseX = evt.ClientX; 
             var mouseY = evt.ClientY;

             var koords;
             var factorX, posX;
             var factorY, posY;
             var ThisAr = new Array(); 
             ThisAr = transF(50);
             factorX = ThisAr[mode[which]][d].x; factorY = ThisAr[mode[which]][d].y;  

             var obj =  SVGDocument.getElementById(el);
             var trans = obj.getAttribute("transform");
             if ((trans.substring(0,9)) == "translate") { 

                    koords =  trans.substring((trans.indexOf("(")+1),trans.indexOf(")"));
                    posX = (parseInt(koords.substring(0,koords.indexOf(",")))+factorX); 
                    posY = (parseInt(koords.substring((koords.indexOf(",")+1),koords.length))+factorY); 
                
                    // check for boundary of box
                    if ((mouseX < 15.5) || (mouseX > 400)) {posX = parseInt(koords.substring(0,koords.indexOf(",")));} 
                    if ((mouseY < 52.5) || (mouseY > 400)) {posY = parseInt(koords.substring((koords.indexOf(",")+1),koords.length));}
                    
                    obj.setAttribute("transform", "translate("+posX+","+posY+")"); 
             } 

             else { alert("No Translate Attribute!");}
 
}


function Rotate (evt,el,which) {

     var mouseX = evt.ClientX; 
     var mouseY = evt.ClientY;

     var angle;
     var NewAngle; 
      
     var obj = SVGDocument.getElementById(el);
     var trans = obj.getAttribute("transform"); 
     if ((trans.substring(0,6)) == "rotate") { 

                    angle =  parseInt(trans.substring((trans.indexOf("(")+1),trans.indexOf(")")));  
                    switch (angle) 
                    { 
                       case 0: NewAngle = 90; mode[which] = 3; break;
                       case 90: NewAngle = 180;  mode[which] = 2; break;
                       case 180: NewAngle = 270;  mode[which] = 1; break;
                       case 270: NewAngle = 0; mode[which] = 0; break;
                       default: NewAngle = 0; mode[which] = 0;
                    }  
                    
                    obj.setAttribute("transform", "rotate("+NewAngle+")");   

             } 

             else { alert("No Rotate Attribute!");}
 
}

function Drag (evt,el) {

    
     var posX = evt.ClientX-50; 
     var posY = evt.ClientY-25;
        
     var obj =  SVGDocument.getElementById(el);
         obj.setAttribute("transform", "translate("+posX+","+posY+")");  
       
         

}


 function Matrix (el,template) {

     var amount = 8;
     var posX = 0;  
     var posY = 0; 
     var offset = 50; 
     var row  = 0;   
     var newField = new Array();
     var color = 0;
     var x,y, koords,id;

     var obj =  SVGDocument.getElementById(el);
             var trans = obj.getAttribute("transform");
             if ((trans.substring(0,9)) == "translate") { 

                    koords =  trans.substring((trans.indexOf("(")+1),trans.indexOf(")"));
                    x = (parseInt(koords.substring(0,koords.indexOf(",")))); 
                    y = (parseInt(koords.substring((koords.indexOf(",")+1),koords.length))); 
             } else { x = 0; y = 0; }
	 
     for (i=0;i < (amount*amount) ;i++) {

             newField[i] = SVGDocument.createElementNS(svgNS,"use");
             id = "f"+i;
             newField[i].setAttribute("id",id);  
             newField[i].setAttributeNS(xlinkNS, "xlink:href", "#"+template+color);
             newField[i].setAttribute("transform", "translate("+posX+","+posY+")");             
             
             // newField[i].setAttribute("onclick", "alert('"+(posX+x)+","+(posY+y)+"')");             
             VirtualMatrix[i] = {id:id,x:(posX+x),y:(posY+y),status:0}; 

             obj.appendChild(newField[i]);
             
             if ( row == (amount-1)) { posY = posY+offset; posX = 0; row = 0; color = color;}
             else { row++; posX = posX+offset; if (color == 0) { color = 1;} else { color = 0; }} 
       
     }
   
}




// ]]>
</script>
<defs id="templates">

<rect id="feld" x="0px" y="0px" width="100px" height="50px" style="fill:#0000ff;stroke:#0000ff;stroke-width:1" />

<rect id="feld0" x="0px" y="0px" width="50px" height="50px" style="fill:#ffffff;stroke:#000000;stroke-width:1" />
<rect id="feld1" x="0px" y="0px" width="50px" height="50px" style="fill:#cccccc;stroke:#000000;stroke-width:1" />

<g id="move">
<circle cx="0" cy="0" r="5" style="fill:#ff0000;stroke:#ff0000;stroke-width:1"/>
</g>

<g id="rotate">
<circle cx="0" cy="0" r="5" style="fill:#0000ff;stroke-width:1"/>
</g>


<g id="domino">
<rect x="0px" y="0px" width="100px" height="50px" rx="3" style="fill:#000000;stroke:black;stroke-width:1"/>
<line x1="50" y1="0"  x2="50" y2="50" style="stroke:#ffffff;stroke-width:2" /> 
<circle cx="12" cy="12" r="5" style="fill:#ffffff;"/> 
<circle cx="38" cy="12" r="5" style="fill:#ffffff;"/>
<circle cx="25" cy="25" r="5" style="fill:#ffffff;"/>
<circle cx="12" cy="38" r="5" style="fill:#ffffff;"/> 
<circle cx="38" cy="38" r="5" style="fill:#ffffff;"/> 
<circle cx="62" cy="38" r="5" style="fill:#ffffff;"/>
<circle cx="88" cy="12" r="5" style="fill:#ffffff;"/> 
</g>

</defs>

<g id="grid1" transform="translate(10,50)" />
<g id="grid2" transform="translate(10,50)" />

<use id="area" onclick="LogField(evt,50,50)" xlink:href="#feld" transform="translate(10,50)" style="visibility:visible" /> 
<use id="button" onclick="ShowMatrix()" xlink:href="#feld" transform="translate(10,500)" style="visibility:visible" /> 
    
<g id="d1" transform="translate(10,50)" >
  <g id="d1a" transform="rotate(0)"> 
     <use id="d1a1" xlink:href="#domino" style="visibility:visible" />     
     <use id="d1a2" onclick="Snap(evt,'d1',0,0)" xlink:href="#move" style="visibility:visible" transform="translate(50,50)" /> 
     <use id="d1a3" onclick="Snap(evt,'d1',1,0)" xlink:href="#move" style="visibility:visible" transform="translate(100,25)" />     
     <use id="d1a4" onclick="Snap(evt,'d1',2,0)" xlink:href="#move" style="visibility:visible" transform="translate(50,0)" />    
     <use id="d1a5" onclick="Snap(evt,'d1',3,0)" xlink:href="#move" style="visibility:visible" transform="translate(0,25)" />
     <use id="d1a6" onclick="Rotate(evt,'d1a',0)" xlink:href="#rotate" style="visibility:visible" transform="translate(0,0)" />
         
  </g>  
</g>

<g id="d2" transform="translate(10,100)" >
  <g id="d2a" transform="rotate(0)"> 
     <use id="d2a1" xlink:href="#domino" style="visibility:visible" />     
     <use id="d2a2" onclick="Snap(evt,'d2',0,1)" xlink:href="#move" style="visibility:visible" transform="translate(50,50)" /> 
     <use id="d2a3" onclick="Snap(evt,'d2',1,1)" xlink:href="#move" style="visibility:visible" transform="translate(100,25)" />     
     <use id="d2a4" onclick="Snap(evt,'d2',2,1)" xlink:href="#move" style="visibility:visible" transform="translate(50,0)" />    
     <use id="d2a5" onclick="Snap(evt,'d2',3,1)" xlink:href="#move" style="visibility:visible" transform="translate(0,25)" />
     <use id="d2a6" onclick="Rotate(evt,'d2a',1)" xlink:href="#rotate" style="visibility:visible" transform="translate(0,0)" />   
  </g>  
</g>



</svg>
